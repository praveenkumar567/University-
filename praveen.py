# -*- coding: utf-8 -*-
"""praveen.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g4NFR3tm48iDaHb2L6Uj_JXgJLSQP6nr
"""

pwd

"""collect the dataset"""

!mkdir my_project

cd my_project

from google.colab import files
upload = files.upload()

import pandas as pd

df = pd.read_csv('University.csv')

df.info()

df.isnull().any()

df=df.rename(columns = {'chance of Admit  ':'chance of Admit'})

"""Exploratory data analysis"""

df.describe()

import seaborn as sns

sns.distplot(df['GRE Score'])

sns.pairplot(df,hue='Research',markers=["^","v"],palette='inferno')

sns.scatterplot(X='University Rating',Y='CGPA',df=df,color='Red',s=100)

import numpy as np

import matplotlib.pyplot as plt

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

category = ['GRE Score', 'TOEFL Score', 'University Rating', 'SOP','CGPA', 'Research', 'Chance of Admit ','LOR '] 
color= ['yellowgreen','gold', 'lightskyblue','pink','red','purple','orange','grey']
start = True
for i in np.arange(4):
      fig = plt.figure(figsize=(14,8))
      plt.subplot2grid((4,2),  (i,0))
      df[category[2*i]].hist(color=color[2*i],bins=10)
      plt.title(category[2*i])
      plt.subplot2grid((4,2), (i,1))
      df[category[2*i+1]].hist (color=color[2*i+1],bins=10)
      plt.title(category[2*i+1])
plt.subplots_adjust(hspace=0.7,wspace=0.2)
plt.show()

x=df.iloc[:,0:7].values
x

y=df.iloc[:,7:].values
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test= train_test_split(x,y, test_size=0.30,random_state=101)

from sklearn.linear_model._logistic import LogisticRegression
cls =LogisticRegression(random_state =0)

y_train=(y_train>0.5)
y_train

y_test

"""model building


"""

from sklearn.linear_model._logistic import LogisticRegression
cls =LogisticRegression (random_state=0)

y_pred=LogisticRegression(x_test)
y_pred

#Libraries to train Neural network
import tensorflow as tf
from tensorflow import keras 
from tensorflow.keras.layers import Dense, Activation, Dropout 
from tensorflow.keras.optimizers import Adam

# Initialize the model 
model=keras.Sequential()

# Add input Layer 
model.add(Dense(7, activation = 'relu', input_dim=7

# Add hidden Layers
model.add(Dense(7, activation='relu'))

# Add output Layer 
model.add(Dense(1, activation="linear"))

model.summary()

model.compile(loss = 'binary_crossentropy', optimizer = "adam, metrics = ['accuracy'])